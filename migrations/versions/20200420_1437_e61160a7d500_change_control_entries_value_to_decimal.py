"""Change control_entries.value to decimal

Revision ID: e61160a7d500
Revises: 1e7359276cf3
Create Date: 2020-04-20 14:37:37.221221

"""
import sqlalchemy as sa
from alembic import context, op
from sqlalchemy.sql.schema import quoted_name  # noqa: F401


from app.db.models import get_schemas

revision = 'e61160a7d500'
down_revision = '1e7359276cf3'


def create_schemas():
    conn = op.get_bind()
    for schema_name in get_schemas():
        if not conn.dialect.has_schema(conn, schema_name):
            conn.execute(sa.schema.CreateSchema(schema_name))


def upgrade():
    create_schemas()
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()


def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'control_entries',
        'value',
        existing_type=sa.INTEGER(),
        type_=sa.Numeric(),
        existing_nullable=True,
        schema=quoted_name('spire', quote=True),
    )
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'control_entries',
        'value',
        existing_type=sa.Numeric(),
        type_=sa.INTEGER(),
        existing_nullable=True,
        schema=quoted_name('spire', quote=True),
    )
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass
