from datatools.io.fileinfo import FileInfo

from app.etl.pipeline_type.dsv_to_table import DSVToTablePipeline
from tests.utils import rows_equal_table


class TestDSVToTablePipeline:
    def test_pipeline_with_comtrade_csv(self, app_with_db):
        pipeline = DSVToTablePipeline(
            app_with_db.dbi,
            organisation='comtrade',
            dataset='country_code_and_iso',
            data_column_types=[
                ('ctyCode', 'int'),
                ('cty Name English', 'text'),
                ('cty Fullname English', 'text'),
                ('Cty Abbreviation', 'text'),
                ('Cty Comments', 'text'),
                ('ISO2-digit Alpha', 'text'),
                ('ISO3-digit Alpha', 'text'),
                ('Start Valid Year', 'text'),
                ('End Valid Year', 'text'),
            ],
        )
        fi = FileInfo.from_path('tests/fixtures/generic_dsv/country_list.csv')
        pipeline.process(fi)

        expected_rows = [
            (0, 'World', 'World', 'World', 'World', 'WL', 'WLD', '1962', '2061'),
            (4, 'Afghanistan', 'Afghanistan', 'Afghanistan', None, 'AF', 'AFG', '1962', '2061'),
            (
                899,
                'Areas, nes',
                'Areas, not elsewhere specified',
                'Areas, nes',
                None,
                None,
                None,
                '1962',
                '2061',
            ),
            (
                918,
                'European Union',
                'European Union',
                'European Union',
                None,
                'EU',
                'EUR',
                None,
                None,
            ),
        ]
        assert rows_equal_table(app_with_db.dbi, expected_rows, pipeline._l0_table, pipeline)

    def test_pipeline_with_comtrade_csv_with_duplicate_rows(self, app_with_db):
        pipeline = DSVToTablePipeline(
            app_with_db.dbi,
            organisation='comtrade',
            dataset='country_code_and_iso',
            data_column_types=[
                ('ctyCode', 'int'),
                ('cty Name English', 'text'),
                ('cty Fullname English', 'text'),
                ('Cty Abbreviation', 'text'),
                ('Cty Comments', 'text'),
                ('ISO2-digit Alpha', 'text'),
                ('ISO3-digit Alpha', 'text'),
                ('Start Valid Year', 'text'),
                ('End Valid Year', 'text'),
            ],
        )
        fi = FileInfo.from_path('tests/fixtures/generic_dsv/country_list_dups.csv')
        pipeline.process(fi)

        expected_rows = [
            (0, 'World', 'World', 'World', 'World', 'WL', 'WLD', '1962', '2061'),
            (4, 'Afghanistan', 'Afghanistan', 'Afghanistan', None, 'AF', 'AFG', '1962', '2061'),
            (
                899,
                'Areas, nes',
                'Areas, not elsewhere specified',
                'Areas, nes',
                None,
                None,
                None,
                '1962',
                '2061',
            ),
            (
                918,
                'European Union',
                'European Union',
                'European Union',
                None,
                'EU',
                'EUR',
                None,
                None,
            ),
            (
                918,
                'European Union',
                'European Union',
                'European Union',
                None,
                'EU',
                'EUR',
                None,
                None,
            ),
        ]
        assert rows_equal_table(app_with_db.dbi, expected_rows, pipeline._l0_table, pipeline)

    def test_pipeline_with_ons_csv(self, app_with_db):
        pipeline = DSVToTablePipeline(
            app_with_db.dbi,
            organisation='comtrade',
            dataset='country_code_and_iso',
            data_column_types=[
                ('pcd', 'text'),
                ('pcd2', 'text'),
                ('pcds', 'text'),
                ('dointr', 'text'),
                ('doterm', 'text'),
                ('oscty', 'text'),
                ('ced', 'text'),
                ('oslaua', 'text'),
                ('osward', 'text'),
                ('parish', 'text'),
                ('usertype', 'text'),
                ('oseast1m', 'text'),
                ('osnrth1m', 'text'),
                ('osgrdind', 'text'),
                ('oshlthau', 'text'),
                ('nhser', 'text'),
                ('ctry', 'text'),
                ('rgn', 'text'),
                ('streg', 'text'),
                ('pcon', 'text'),
                ('eer', 'text'),
                ('teclec', 'text'),
                ('ttwa', 'text'),
                ('pct', 'text'),
                ('nuts', 'text'),
                ('statsward', 'text'),
                ('oa01', 'text'),
                ('casward', 'text'),
                ('park', 'text'),
                ('lsoa01', 'text'),
                ('msoa01', 'text'),
                ('ur01ind', 'text'),
                ('oac01', 'text'),
                ('oa11', 'text'),
                ('lsoa11', 'text'),
                ('msoa11', 'text'),
                ('wz11', 'text'),
                ('ccg', 'text'),
                ('bua11', 'text'),
                ('buasd11', 'text'),
                ('ru11ind', 'text'),
                ('oac11', 'text'),
                ('lat', 'text'),
                ('long', 'text'),
                ('lep1', 'text'),
                ('lep2', 'text'),
                ('pfa', 'text'),
                ('imd', 'text'),
                ('calncv', 'text'),
                ('stp', 'text'),
            ],
        )
        fi = FileInfo.from_path('tests/fixtures/generic_dsv/ons_postcodes.csv')
        pipeline.process(fi)

        expected_rows = [
            (
                'AB1 0AA',
                'AB1  0AA',
                'AB1 0AA',
                '198001',
                None,
                'S99999999',
                'S99999999',
                'S12000033',
                'S13002843',
                'S99999999',
                '0',
                '385386',
                '0801193',
                '1',
                'S08000020',
                'S99999999',
                'S92000003',
                'S99999999',
                '0',
                'S14000002',
                'S15000001',
                'S09000001',
                'S22000047',
                'S03000012',
                'S31000935',
                '99ZZ00',
                'S00001364',
                '01C30',
                'S99999999',
                'S01000011',
                'S02000007',
                '6',
                '3C2',
                'S00090303',
                'S01006514',
                'S02001237',
                'S34002990',
                'S03000012',
                'S99999999',
                'S99999999',
                '3',
                '1C3',
                '57.101474',
                '-2.242851',
                'S99999999',
                'S99999999',
                'S23000009',
                '6808',
                'S99999999',
                'S99999999',
            ),
            (
                'AB1 0AB',
                'AB1  0AB',
                'AB1 0AB',
                '198001',
                '199606',
                'S99999999',
                'S99999999',
                'S12000033',
                'S13002843',
                'S99999999',
                '0',
                '385177',
                '0801314',
                '1',
                'S08000020',
                'S99999999',
                'S92000003',
                'S99999999',
                '0',
                'S14000002',
                'S15000001',
                'S09000001',
                'S22000047',
                'S03000012',
                'S31000935',
                '99ZZ00',
                'S00001270',
                '01C31',
                'S99999999',
                'S01000011',
                'S02000007',
                '6',
                '4B3',
                'S00090303',
                'S01006514',
                'S02001237',
                'S34002990',
                'S03000012',
                'S99999999',
                'S99999999',
                '3',
                '1C3',
                '57.102554',
                '-2.246308',
                'S99999999',
                'S99999999',
                'S23000009',
                '6808',
                'S99999999',
                'S99999999',
            ),
        ]
        assert rows_equal_table(app_with_db.dbi, expected_rows, pipeline._l0_table, pipeline)

        # test if processing new data overwrites L0
        fi = FileInfo.from_path('tests/fixtures/generic_dsv/ons_postcodes_v2.csv')
        pipeline.process(fi)

        # check L0
        expected_rows = [
            (
                'AB1 0AA',
                'AB1  0AA',
                'AB1 0AA',
                '200001',
                '199606',
                'S99999999',
                'S99999999',
                'S12000033',
                'S13002843',
                'S99999999',
                '0',
                '385386',
                '0801193',
                '1',
                'S08000020',
                'S99999999',
                'S92000003',
                'S99999999',
                '0',
                'S14000002',
                'S15000001',
                'S09000001',
                'S22000047',
                'S03000012',
                'S31000935',
                '99ZZ00',
                'S00001364',
                '01C30',
                'S99999999',
                'S01000011',
                'S02000007',
                '6',
                '3C2',
                'S00090303',
                'S01006514',
                'S02001237',
                'S34002990',
                'S03000012',
                'S99999999',
                'S99999999',
                '3',
                '1C3',
                '57.101474',
                '-2.242851',
                'S99999999',
                'S99999999',
                'S23000009',
                '6808',
                'S99999999',
                'S99999999',
            ),
            (
                'AB1 0AB',
                'AB1  0AB',
                'AB1 0AB',
                '198001',
                '199606',
                'S99999999',
                'S99999999',
                'S12000033',
                'S13002843',
                'S99999999',
                '0',
                '385177',
                '0801314',
                '1',
                'S08000020',
                'S99999999',
                'S92000003',
                'S99999999',
                '0',
                'S14000002',
                'S15000001',
                'S09000001',
                'S22000047',
                'S03000012',
                'S31000935',
                '99ZZ00',
                'S00001270',
                '01C31',
                'S99999999',
                'S01000011',
                'S02000007',
                '6',
                '4B3',
                'S00090303',
                'S01006514',
                'S02001237',
                'S34002990',
                'S03000012',
                'S99999999',
                'S99999999',
                '3',
                '1C3',
                '57.102554',
                '-2.246308',
                'S99999999',
                'S99999999',
                'S23000009',
                '6808',
                'S99999999',
                'S99999999',
            ),
            (
                'AB1 0AD',
                'AB1  0AD',
                'AB1 0AD',
                '198001',
                '199606',
                'S99999999',
                'S99999999',
                'S12000033',
                'S13002843',
                'S99999999',
                '0',
                '385053',
                '0801092',
                '1',
                'S08000020',
                'S99999999',
                'S92000003',
                'S99999999',
                '0',
                'S14000002',
                'S15000001',
                'S09000001',
                'S22000047',
                'S03000012',
                'S31000935',
                '99ZZ00',
                'S00001364',
                '01C30',
                'S99999999',
                'S01000011',
                'S02000007',
                '6',
                '3C2',
                'S00090399',
                'S01006514',
                'S02001237',
                'S34003015',
                'S03000012',
                'S99999999',
                'S99999999',
                '3',
                '6A1',
                '57.100556',
                '-2.248342',
                'S99999999',
                'S99999999',
                'S23000009',
                '6808',
                'S99999999',
                'S99999999',
            ),
        ]
        assert rows_equal_table(app_with_db.dbi, expected_rows, pipeline._l0_table, pipeline)
